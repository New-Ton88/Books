@model Books.Models.ViewModels.BookViewModel
@using Books.Extensions

@{
    ViewData["Title"] = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h3>Create Book</h3>

<hr />

<partial name="_StatusMessagePartial" model="@Model.StatusMessage" />

<form asp-action="Create">
    <div class="text-dark">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="row form-group">
            <label class="col-2 text-left" asp-for="@Model.Book.Name">Book Name</label>
            <input class="col-5 activeSearch" type="text" asp-for="@Model.Book.Name" />
            <span asp-validation-for="@Model.Book.Name"></span>
        </div>
        <div class="row form-group">
            <label class="col-2 text-left" asp-for="@Model.Book.Author.Name">Author</label>
            <input class="col-5 activeSearch" type="text" asp-for="@Model.Book.Author.Name" />
            <select hidden asp-for="@Model.Book.Author.Id"
                    asp-items="Model.Authors.ToSelectListItem(Model.Book.Author.Id)"></select>
            <partial name="_CreateButtonGreenPartial" model='"Author"' />
            <span asp-validation-for="@Model.Book.Author.Name"></span>
        </div>
        <div class="row form-group">
            <label class="col-2 text-left" asp-for="@Model.Book.Language.Name">Language</label>
            <input class="col-5 activeSearch" type="text" asp-for="@Model.Book.Language.Name" />
            <partial name="_CreateButtonGreenPartial" model='"Language"' />
            <span asp-validation-for="@Model.Book.Language.Name"></span>
        </div>
        <div class="row form-group">
            <label class="col-2 text-left" asp-for="@Model.Book.Publisher.Name">Publisher</label>
            <input class="col-5 activeSearch" type="text" asp-for="@Model.Book.Publisher.Name" />
            <partial name="_CreateButtonGreenPartial" model='"Publisher"' />
            <span asp-validation-for="@Model.Book.Publisher.Name"></span>
        </div>
        <div class="row form-group">
            <label class="col-2 text-left" asp-for="@Model.Book.Genre.Category.Name">Category</label>
            <input class="col-5 activeSearch" type="text" asp-for="@Model.Book.Genre.Category.Name" />
            <partial name="_CreateButtonGreenPartial" model='"Category"' />
            <span asp-validation-for="@Model.Book.Genre.Category.Name"></span>
        </div>
        <div class="form-group row">
            <label class="col-2 text-left" asp-for="@Model.Book.Genre.Name">Genre</label>
            <input class="col-5 activeSearch" type="text" asp-for="@Model.Book.Genre.Name" />
            <partial name="_CreateButtonGreenPartial" model='"Genre"' />
            <span asp-validation-for="@Model.Book.Genre.Name"></span>
        </div>
        <div class="form-group row">
            <label class="col-2 text-left" asp-for="@Model.Book.Cover.Name">Cover</label>
            <input class="col-5 activeSearch" type="text" asp-for="@Model.Book.Cover.Name" />
            <partial name="_CreateButtonGreenPartial" model='"Cover"' />
            <span asp-validation-for="@Model.Book.Cover.Name"></span>
        </div>
    </div>
</form>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        $(".activeSearch").on("input", function (e) {
            var value = this.value;
            if (value) {
                var results = {};
                var matchedOptions = [];
                var $list = $(this).next();               
                $($list).each(function () {
                    for (var i = 0; i < this.options.length; i++) {
                        var optionText = this.options[i].text;
                        var splittedValue = value.trim().split(" ");
                        splittedValue.forEach(function (word) {
                            if (optionText.toLowerCase().includes(word.toLowerCase())) {
                                var resultValue = results[optionText];
                                if (resultValue) {
                                    results[optionText] = resultValue + word.length;
                                }
                                else {
                                    results[optionText] = word.length;
                                }
                            }
                            
                        })
                    }
                        
                })
                matchedOptions = sortDict(results);
                console.log(matchedOptions);  
            }   
        })

        function stringContains(inputObject, searchString) {
            return inputObject.indexOf(searchString) >= 0;
        }

        function sortDict(dict) {
            var sorted = [];
            var items = Object.keys(dict).map(function (key) {
                return [key, dict[key]];
            });

            // Sort the array based on the second element
            items.sort(function (first, second) {
                return second[1] - first[1];
            });

            for (var i = 0; i < items.length; i++) {
                sorted[i] = items[i][0];
            }

            return sorted;
        }
    </script>
}
