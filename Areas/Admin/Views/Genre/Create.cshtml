@model Books.Models.ViewModels.CategoryAndGenreViewModel
@using Books.Extensions
@{
    ViewData["Title"] = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h3 class="text-dark">Create Genre</h3>

<hr />

<partial name="_StatusMessagePartial" model="Model.StatusMessage" />

<form method="post" asp-action="Create">
    <div class="text-dark">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="form-group row">
            <label class="col-2 " asp-for="Genre.CategoryId"></label>
            <select id="ddlCategories" asp-for="Genre.CategoryId" 
                    asp-items="Model.Categories.ToSelectListItem(Model.Genre.CategoryId)" 
                    class="form-control col-5"></select>
        </div>
        <div class="form-group row">
            <label asp-for="Genre.Name" class="col-2"></label>
            <input asp-for="Genre.Name" class="col-5" placeholder="Type Genre Name..."/>
            <span asp-validation-for="Genre.Name" class="text-danger"></span>
        </div>
        <div class="row">
            <div class="col-5 offset-2 px-0">
                <partial name="_CreateAndBackButtonsPartial" />
            </div>
        </div>
    </div>
</form>

<div id='genresList' class="text-dark"></div>

@section Scripts{
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

<script type="module">
    import { updateGenresList } from '/js/site.js';

    /*  updateGenresList has to be called 2 times:
        1. When page is loaded
        2. When category is selected from drop-down list
    */

    // 1#
    // ------------------
    $(function () {
        updateGenresList();
    });

    // 2#
    // ------------------
    $("#ddlCategories").on("change", function () {
        updateGenresList();
    });

</script>